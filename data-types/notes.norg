* Tuples
** What are tuples?
   Tuples are a collections data structure of a fixed size, unlike lists that are more dynamic.

** Bullets
   - Difference from lists, is that tuples are saved sequentually in memory, while lists are not (linked lists).
   - Accessing elements of a tuple is very cheap since they are stored sequentually in memory.
   - Accessing elements of a tuple is done via the elem method that's a part of the Kernel module.


** Example:
   @code elixir
   my_list = [1, 2, 3]
   my_list ++ [4, 5, 6] # Valid

   my_tuple = {1, 2, 3}
   my_tuple ++ {4, 5, 6} # Invalid

   my_tuple = {"roo", 2, 3}
   elem(my_tulpe, 0) # Will return the 0th element of the tuple ("roo").
   @end


* List Keywords
  ** What are list keywords  
    Keywords list are basically optional function arguments, represented as a list of tuples.

  ** Example
     @code elixir
     String.split("1 2 3", " ") # Will return ["1", "2", "3"]

     # With keyword lists.
     String.split("1      2      3", " ", trim=true) # Returns ["1", "2", "3"]

     # Example with a function.
     def test_func(opts \\ []) do
	     Keyword.get(opts, :name, "Ragnar")
     end

     test_func(name: "Oli") # Returns Oli
     @end


  
* Maps
** What are maps?
   Maps are a key-value store of dynamic size, represented internally as hash maps.
** Bullets
   - Map keys(or fields) can be of any type (string, number, atom etc..)
   - You can point to the value either with => or :
   - If you use a colon to seperate the key and value and the key is of type atom, you can skip the colon prefix on the atom.
   - Atoms are the type commonly used as the type for keys in maps
   - To access elements in a map, you can use a square bracket, dot notation or the Map.get() function.
** Common operations
   - Access an element: Map.get(map, key, default \\ nil)
   - Adding an element: Map.put(map, new_key, value)
** Code
   @code elixir
   traditional_map = %{:name => "Ragnar", 1 => false, "age" => 35}

   colon_seperated_map = %{name: "Ragnar", age: 35}

   # Accessing using []
   traditional_map[:name]

   # Accessing using the dot . notation
   colon_seperated_map.name

   # Accessing with the Map.get() function
   Map.get(colon_seperated_map, :name)

   # Accessing with Map.get() with a default value.
   Map.get(colon_seperated_map, :occupation, "Student")

   # Add an element to a map.
   Map.put(colon_seperated_map, :new_key, "New value")

   # Updating an element
   %{colon_seperated_map | :key: "new value"}
   @end


* Mix
** What is Mix 
   Mix is the build tool for Elixir
** Common mix commands
   - mix compile: Compiles your elixir program.
   - mix format: Formats your elixir code.
   - mix test: Runs your elixir unit tests
   - mix new <name>: Creates a new elixir project.
   -- Creates folder structure, gitignore, lib, test folder ect.
   - mix help: Shows you all commands available.

* Integers
** Common functions.
*** Some common functions include:
    - Parse: Integer.parse("<string>").
    - To string: Integer.to_string(123) would return "123"
    - Is odd: Integer.is_odd(int) checks if an integer is an odd number.
    - Is even: Integer.is_even(int) same as above for even numbers
    - Mod: Will always return a negative result unlike rem.
** Bullets
   - Integers in Elixir can grow as large as your memory allows, there is no fixed size.
   - BEAM uses tagged pointers to distinguish small integers from other types.
   - Big integers are heap-allocated and reference counted
